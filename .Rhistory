if (t.test(normal_results$xs, normal_results$ys, alternative=c('two.sided'))$p.value < 0.05){
normal_t_test_p = normal_t_test_p + 1
}
if (wilcox.test(T5_results$xs, T5_results$ys, alternative=c('two.sided'))$p.value < 0.05){
T5_wilcox_test_p = T5_wilcox_test_p + 1
}
if (t.test(T5_results$xs, T5_results$ys, alternative=c('two.sided'))$p.value < 0.05){
T5_t_test_p = T5_t_test_p + 1
}
}
normal_t_test_p = normal_t_test_p/500.0
normal_t_test_ps = c(normal_t_test_ps, normal_t_test_p)
normal_wilcox_test_p = normal_wilcox_test_p/500.0
normal_wilcox_test_ps = c(normal_wilcox_test_ps, normal_wilcox_test_p)
T5_t_test_p = T5_t_test_p/500.0
T5_t_test_ps = c(T5_t_test_ps, T5_t_test_p)
T5_wilcox_test_p = T5_wilcox_test_p/500.0
T5_wilcox_test_ps = c(T5_wilcox_test_ps, T5_wilcox_test_p)
}
print(c(length(normal_t_test_ps), length(normal_wilcox_test_ps), length(T5_t_test_ps), length(T5_wilcox_test_ps)))
print(c(dim(n_t_ps), dim(n_W_ps), dim(T_t_ps), dim(T_W_ps)))
print(k)
n_t_ps[k,] = normal_t_test_ps
n_W_ps[k,] = normal_wilcox_test_ps
T_t_ps[k,] = T5_t_test_ps
T_W_ps[k,] = T5_wilcox_test_ps
}
return_list = list('normal_wilcox' = n_W_ps, 'normal_t_test' = n_t_ps, 'T5_wilcox' = T_W_ps, 'T5_t_test' = T_t_ps)
return(return_list)
}
ns = c(10, 20, 30, 40, 50, 60, 70, 80, 90, 100)
deltas = c(-1,-0.8,-0.6,-0.4,-0.2,0,0.2,0.4,0.6,0.8,1)
results = compare_tests(deltas, ns)
results
make_plots = function(){
plot = qplot(x = deltas, y = results$T5_t_test[1,], geom='line')
for (i in 2:length(deltas)){
plot + geom_line(x = deltas, y = results$T5_t_test[i,])
}
return(plot)
}
make_plots()
make_plots = function(){
plot = qplot(x = deltas, y = results$T5_t_test[1,], geom='line')
for (i in 2:6){
plot + geom_line(x = deltas, y = results$T5_t_test[i,])
}
return(plot)
}
make_plots()
make_plots = function(){
plot = qplot(x = deltas, y = results$T5_t_test[1,], geom='line')
for (i in 2:6){
plot = plot + geom_line(x = deltas, y = results$T5_t_test[i,])
}
return(plot)
}
make_plots()
make_plots = function(){
plot = qplot(x = deltas, y = results$T5_t_test[1,], geom='line')
for (i in 2:6){
plot = plot + qplot(x = deltas, y = results$T5_t_test[i,], geom='line')
}
return(plot)
}
make_plots()
make_plots = function(){
plot = plot(x = deltas, y = results$T5_t_test[1,], geom='line')
for (i in 2:6){
lines(x = deltas, y = results$T5_t_test[i,], geom='line')
}
return(plot)
}
make_plots()
pallete()
(pal = palette())
10%3
10 % 3
10 %% 3
make_plots = function(){
plot = plot(x = deltas, y = results$T5_t_test[1,], geom='line')
for (i in 2:length(deltas)){
lines(x = deltas, y = results$T5_t_test[i,], geom='line')
}
return(plot)
}
make_plots()
results$T5_t_test
length(deltas)
make_plots = function(){
plot = plot(x = deltas, y = results$T5_t_test[1,], geom='line')
for (i in 2:length(ns)){
lines(x = deltas, y = results$T5_t_test[i,], geom='line')
}
return(plot)
}
make_plots()
ns = c(10, 20, 30, 40, 50, 60, 70, 80, 90, 100)
deltas = c(-1,-0.8,-0.6,-0.4,-0.2,0,0.2,0.4,0.6,0.8,1)
make_plots = function(){
plot = plot(x = deltas, y = results$T5_t_test[1,], geom='line')
for (i in 2:length(ns)){
lines(x = deltas, y = results$T5_t_test[i,], geom='line')
}
return(plot)
}
make_plots()
make_plots = function(){
plot = plot(x = deltas, y = results$T5_t_test[1,], type='l')
for (i in 2:length(ns)){
lines(x = deltas, y = results$T5_t_test[i,], geom='line')
}
return(plot)
}
make_plots()
make_plots = function(){
plot = plot(x = deltas, y = results$T5_t_test[1,], type='l')
for (i in 2:length(ns)){
lines(x = deltas, y = results$T5_t_test[i,], type='l')
}
return(plot)
}
make_plots()
warnings()
make_plots = function(){
plot = plot(x = deltas, y = results$T5_t_test[1,], type='l')
for (i in 2:length(ns)){
lines(x = deltas, y = results$T5_t_test[i,], type='l')
}
return(plot)
}
make_plots()
make_plots = function(){
plot = plot(x = deltas, y = results$T5_t_test[1,], type='l', main='T5 t test')
for (i in 2:length(ns)){
lines(x = deltas, y = results$T5_t_test[i,], type='l')
}
return(plot)
}
make_plots()
make_plots = function(){
(pal = palette())
plot = plot(x = deltas, y = results$T5_t_test[1,], type='l', main='T5 t test')
for (i in 2:length(ns)){
lines(x = deltas, y = results$T5_t_test[i,], type='l', col = pal[length(pal)%%i])
}
return(plot)
}
make_plots()
(pal = palette())
length(pal)
make_plots = function(){
(pal = palette())
plot = plot(x = deltas, y = results$T5_t_test[1,], type='l', main='T5 t test')
for (i in 2:length(ns)){
lines(x = deltas, y = results$T5_t_test[i,], type='l', col = pal[i%%length(pal)])
}
return(plot)
}
make_plots()
make_plots = function(){
(pal = palette())
plot = plot(x = deltas, y = results$T5_t_test[1,], type='l', main='T5 t test')
for (i in 2:length(ns)){
lines(x = deltas, y = results$T5_t_test[i,], type='l', col = pal[i%%length(pal)])
}
for (i in 1:length(ns)){
lines(x = deltas, y = results$T5_W_test[i,], type='--', col = pal[i%%length(pal)])
}
return(plot)
}
make_plots()
make_plots = function(){
(pal = palette())
plot = plot(x = deltas, y = results$T5_t_test[1,], type='l', main='T5 t test')
for (i in 2:length(ns)){
lines(x = deltas, y = results$T5_t_test[i,], type='l', col = pal[i%%length(pal)])
}
for (i in 1:length(ns)){
lines(x = deltas, y = results$T5_W_test[i,], lty=2, col = pal[i%%length(pal)])
}
return(plot)
}
make_plots()
make_plots = function(){
(pal = palette())
plot = plot(x = deltas, y = results$T5_t_test[1,], type='l', main='T5 t test')
for (i in 2:length(ns)){
lines(x = deltas, y = results$T5_t_test[i,], type='l', col = pal[i%%length(pal)])
}
for (i in 1:length(ns)){
lines(x = deltas, y = results$T5_W_test[i,], type="o", lty=2, col = pal[i%%length(pal)])
}
return(plot)
}
make_plots()
make_plots = function(){
(pal = palette())
plot = plot(c(0), xlim=c(-1,1), ylim=c(0,1), type='n', xlab="Delta", ylab="Power", main='Power simulation')
for (i in 1:length(ns)){
lines(x = deltas, y = results$T5_t_test[1,], type='l', col = pal[i%%length(pal)])
lines(x = deltas, y = results$T5_W_test[i,], type="l", lty=2, col = pal[i%%length(pal)])
}
return(plot)
}
make_plots()
lines(x = deltas, y = results$T5_W_test[i,], lty=2, col = pal[i%%length(pal)])
make_plots = function(){
(pal = palette())
plot = plot(c(0), xlim=c(-1,1), ylim=c(0,1), type='n', xlab="Delta", ylab="Power", main='Power simulation')
for (i in 1:length(ns)){
lines(x = deltas, y = results$T5_t_test[i,], type='l', col = pal[i%%length(pal)])
lines(x = deltas, y = results$T5_W_test[i,], lty=2, col = pal[i%%length(pal)])
}
return(plot)
}
make_plots()
results$T5_W_test
restuls
results
make_plots = function(){
(pal = palette())
plot = plot(c(0), xlim=c(-1,1), ylim=c(0,1), type='n', xlab="Delta", ylab="Power", main='Power simulation')
for (i in 1:length(ns)){
lines(x = deltas, y = results$T5_t_test[i,], type='l', col = pal[i%%length(pal)])
lines(x = deltas, y = results$T5_wilcox[i,], lty=2, col = pal[i%%length(pal)])
}
return(plot)
}
make_plots()
make_plots = function(){
(pal = palette())
plot = plot(c(0), xlim=c(-1,1), ylim=c(0,1), type='n', xlab="Delta", ylab="Power", main='Power simulation')
for (i in 1:length(ns)){
lines(x = deltas, y = results$T5_t_test[i,], type='l')
lines(x = deltas, y = results$T5_wilcox[i,], lty=2)
}
return(plot)
}
make_plots()
make_plots = function(){
(pal = palette())
plot = plot(c(0), xlim=c(-1,1), ylim=c(0,1), type='n', xlab="Delta", ylab="Power", main='Power simulation')
for (i in 1:length(ns)){
lines(x = deltas, y = results$T5_t_test[i,], type='l', col = pal[i%%length(pal)])
lines(x = deltas, y = results$T5_wilcox[i,], lty=2, col = pal[i%%length(pal)])
}
return(plot)
}
make_plots()
make_plots = function(){
(pal = palette())
plot = plot(c(0), xlim=c(-1,1), ylim=c(0,1), type='n', xlab="Delta", ylab="Power", main='Power simulation')
for (i in 1:length(ns)){
lines(x = deltas, y = results$T5_t_test[i,], type='l', col = i)
lines(x = deltas, y = results$T5_wilcox[i,], lty=2, col = i)
}
return(plot)
}
make_plots()
RSS = 3:10 #Right shoe size
LSS = rnorm(RSS, RSS, 0.1) #Left shoe size - similar to RSS
cor(LSS, RSS) #correlation ~ 0.99
weights = 120 + rnorm(RSS, 10*RSS, 10)
##Fit a joint model
m = lm(weights ~ LSS + RSS)
##F-value is very small, but neither LSS or RSS are significant
summary(m)
##Fitting RSS or LSS separately gives a significant result.
summary(lm(weights ~ LSS))
?m
"lm"
?lm
lm(LSS ~ RSS)
Sys.setenv(MAKEFLAGS = "-j4")
install.packages("rstan", dependencies = TRUE)
library(rstan) # observe startup messages
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
?rstan
setwd("~/Desktop/Other/MS_Courses/Inf_and_rep/project/nycSchoolPredictions")
library("CARBayesST")
library("shapefiles")
library("sp")
library("CARBayes")
library("spdep")
shp = read.shp("nycb2010_16c/nycb2010.shp")
dbf = read.dbf("nycb2010_16c/nycb2010.dbf")
data = read.csv("data/train_with_zeros.csv")
attributes(dbf)
attributes(dbf$dbf)
attributes(shp)
attributes(shp$shp)
dbf$dbf$BoroName
dbf = filter(dbf, BoroName == Brooklyn)
dbf = filter(dbf, dbf$BoroName == Brooklyn)
attributes(dbf$header)
dbf$dbf = filter(dbf$dbf, BoroName == Brooklyn)
dbf$dbf = filter(dbf$dbf, 'BoroName' == Brooklyn)
dbf$dbf = filter(dbf$dbf, 'BoroName' == 'Brooklyn')
data = read.csv("data/train_with_zeros.csv")
combined = combine.data.shapefile(data=data, shp=shp, dbf=dbf)
attributes(shp)
attributes(shp$shp)
shp$shp
combined = combine.data.shapefile(data=data, shp=shp, dbf=dbf)
shp = read.shp("nycb2010_16c/nycb2010.shp")
dbf = read.dbf("nycb2010_16c/nycb2010.dbf")
data = read.csv("data/train_with_zeros.csv")
combined = combine.data.shapefile(data=data, shp=shp, dbf=dbf)
dbf$dbf = filter(dbf$dbf, 'BoroName' == 'Brooklyn')
combined = combine.data.shapefile(data=data, shp=shp, dbf=dbf)
attributes(dbf$dbf)
attributes(dbf)
attributes(dbf$dbf)
dbf = read.dbf("nycb2010_16c/nycb2010.dbf")
attributes(dbf$dbf)
type(dbf$dbf)
typeof(dbf$dbf)
dbf$dbf$BCTCB2010
install.packages("raster")
install.packages("rgeos")
install.packages("maptools")
library('maptools')
CTs = readShapePoly("nycb2010_16c/nycb2010.shp")
Districts = readShapePoly("nysd_16d/nysd.shp")
Districts@data
attributes(Districts)
str(Districts)
Districts@data
Districts@data$SchoolDist == 20
D20 = Districts[Districts@data$SchoolDist == 20]
plot(Districts)
plot(D20)
plot(D20)
D20 = Districts[Districts$SchoolDist == 20]
plot(D20)
plot(D20)
Districts$SchoolDist == 20
Districts[Districts$SchoolDist == 20]
class(Districts)
D20 = Districts[Districts$SchoolDist == 20, ]
plot(D20)
Nested = gIntersects(CTs,D20,byid=TRUE)
library("rgdal")
install.packages("rgdal")
setwd("~/Desktop/Other/MS_Courses/Inf_and_rep/project/nycSchoolPredictions")
Nested = gIntersects(CTs,D20,byid=TRUE)
library("rgeos")
Nested = gIntersects(CTs,D20,byid=TRUE)
attribute(D20)
attributes(D20)
str(D20)
Nested = gIntersects(CTs@polygons,D20@polygons,byid=TRUE)
Nested = gIntersects(CTs,D20,byid=TRUE)
Nested = gIntersects(CTs,D20)
plot(CTs)
setwd("~/Desktop/Other/MS_Courses/Inf_and_rep/project/nycSchoolPredictions")
library(CARBayesST)
library(CARBayes)
library(sp)
library(raster)
library(rgdal)
library(rgeos)
library(maptools)
str(CTs@data)
Brooklyn = CTs[CTs$BoroName == 'Brooklyn',]
plot(Brooklyn)
Nested = gIntersects(Brooklyn,D20,byid=TRUE)
typeof(Brooklyn@polygons)
length(Brooklyn@polygons)
length(Brooklyn@polygons[1])
length(Brooklyn@polygons[2])
length(Brooklyn@polygons[3])
Brooklyn@polygons[3]
Brooklyn@polygons[3]$coords
Brooklyn@polygons[3]@coords
class(Brooklyn@polygons[3])
str(Brooklyn@polygons[3])
str(Brooklyn@polygons[3][1]@Polygons@coords)
str(Brooklyn@polygons[3][1])
str(Brooklyn@polygons[3][1])
str(Brooklyn@polygons[3])
str(Brooklyn@polygons[3]$.)
str(Brooklyn@polygons[3]$)
attributes(Brooklyn@polygons[3])
str(Brooklyn@polygons[3]$)
str(Brooklyn@polygons[3])
Brooklyn@polygons
Brooklyn@polygons@coords
Brooklyn@polygons[[3]]
Brooklyn@polygons[[3]]@Polygons
Brooklyn@polygons[[3]]@Polygons[[1]]
Brooklyn@polygons[[3]]@Polygons[[1]]@coords
shape(Brooklyn@polygons[[3]]@Polygons[[1]]@coords)
length(Brooklyn@polygons[[3]]@Polygons[[1]]@coords)
length(Brooklyn@polygons[[3]]@Polygons[[1]]@coords)/2
typeof(Brooklyn@polygons[[3]]@Polygons[[1]]@coords)
class(Brooklyn@polygons[[3]]@Polygons[[1]]@coords)
str(Brooklyn@polygons[[3]]@Polygons[[1]]@coords)
dim(Brooklyn@polygons[[3]]@Polygons[[1]]@coords)
dim(Brooklyn@polygons[[3]]@Polygons[[1]]@coords)[1]
for (p in Brooklyn@polygons){}
Nested = gIntersects(Brooklyn,D20,byid=TRUE)
for (p in Brooklyn@polygons){
if (dim(p@Polygons[[1]]@coords)[1] < 4{
print(p)
}
}
for (p in Brooklyn@polygons){
if (dim(p@Polygons[[1]]@coords)[1] < 4) {
print(p)
}
}
for (p in Brooklyn@polygons){
if (dim(p@Polygons[[1]]@coords)[1] < 4) {
print(p)
}
}
for (p in Brooklyn@polygons){
if (dim(p@Polygons[[1]]@coords)[1] < 2) {
print(p)
}
}
for (p in Brooklyn@polygons){
if (dim(p@Polygons[[1]]@coords)[1] < 8) {
print(p)
}
}
str(D20)
Nested = gIntersects(Brooklyn,D20,byid=TRUE)
Nested = intersect(Brooklyn,D20,byid=TRUE)
Nested = intersect(Brooklyn,D20)
Nested = intersect(Brooklyn,D20)
Nested = intersect(Brooklyn,D20)
D20_no_atts = as(D20, 'SpatialPolygons')
Brooyln_no_atts = as(Brooklyn, 'SpatialPolygons')
Brooklyn_no_atts = as(Brooklyn, 'SpatialPolygons')
Nested = intersect(Brooklyn_no_atts,D20_no_atts)
Nested = intersect(D20,Brooklyn)
for (p in Brooklyn@polygons){
if (dim(p@Polygons[[1]]@area) < 0) {
print(p)
}
}
if (p@Polygons[[1]]@area < 0) {
for (p in Brooklyn@polygons){
if (p@Polygons[[1]]@area < 0) {
print(p)
}
}
}
for (p in Brooklyn@polygons){
if (p@Polygons[[1]]@area < 0) {
print(p)
}
}
p@Polygons[[1]]@area
for (p in Brooklyn@polygons){
if (p@Polygons[[1]]@area <= 0) {
print(p)
}
}
library(rgdal)
ogrInfo('nycb2010_16c',nycb2010)
ogrInfo('./nycb2010_16c',nycb2010)
ogrInfo('./nycb2010_16c',"nycb2010")
CTs = readOGR('./nycb2010_16c',"nycb2010")
Districts = readOGR('./nysd_16d',"nysd")
str(Districts)
D20 = Districts[Districts$ID == 20, ]
str(D20)
D20 = Districts[Districts$SchoolDist == 20, ]
str(D20)
Brooklyn = CTs[CTs$BoroName == 'Brooklyn',]
Nested = intersect(D20,Brooklyn)
Nested = intersect(Brooklyn,D20)
library(rgeos)
Nested = intersect(Brooklyn,D20)
Nested = gIntersection(Brooklyn,D20)
D20
str(D20)
D20@polygons,
D20@polygons
Nested = gIntersection(D20@polygons, Brooklyn)
Nested = gIntersection(D20, Brooklyn)
Nested = gIntersection(D20, Brooklyn, byid=TRUE)
D20_transform = spTransform(D20, Brooklyn[[1]]@proj4string)
[[1]]
Brooklyn[[1]]
Brooklyn
str(Brooklyn)
typeof(Brooklyn)
Brooklyn@proj4string
D20_transform = spTransform(D20, Brooklyn@proj4string)
Nested = gIntersection(D20_transform, Brooklyn, byid=TRUE)
Nested = gIntersection(D20_transform, Brooklyn)
plot(D20)
plot(Brooklyn)
library(raster)
joined = union(D20, Brooklyn)
setwd("~/Desktop/Other/MS_Courses/Inf_and_rep/project/nycSchoolPredictions")
library(CARBayesST)
library(CARBayes)
library(rgdal)
library(raster)
CTs = readOGR('./nycb2010_16c',"nycb2010")
Districts = readOGR('./nysd_16d',"nysd")
D20 = Districts[Districts$SchoolDist == 20, ]
Brooklyn = CTs[CTs$BoroName == 'Brooklyn',]
joined = union(D20, Brooklyn)
sessionInfo()
